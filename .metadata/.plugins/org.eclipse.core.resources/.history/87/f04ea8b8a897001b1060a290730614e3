package com.dipak.datastructure.list;

import java.util.NoSuchElementException;

public class LinkedList {

	private Node first;
	private Node last;

	// 12 2 5 8 10 50
	public void addFirst(int value) {
		Node node = null;
		if (isEmpty()) {
			node = new Node(value, null);
			last = node;
		} else {
			node = new Node(value, first);
		}
		first = node;
	}

	public void removeFirst() {
		if (isEmpty()) {
			throw new NoSuchElementException();
		}
		Node newFirstNode = first.getNext();
		if (first == last) {
			first = last = null;
		}
		first.setNext(null);
		first = newFirstNode;
	}

	public void removeLast() {
		if (!isEmpty()) {
			Node lastNode = first;
			while (lastNode == last) {

			}
		}

	}

	public void addLast(int value) {
		Node node = new Node(value, null);
		if (isEmpty()) {

			first = node;
			last = node;
		} else {
			node = new Node(value, null);
			last.setNext(node);
		}
		last = node;
	}

	public boolean isEmpty() {
		return first == null;
	}

	public String toString() {
		StringBuilder builder = new StringBuilder("[");
		if (isEmpty()) {
			return builder.append("]").toString();
		} else {
			Node node = first;
			do {
				builder.append(node.getValue());
				builder.append(",");
				node = node.getNext();
			} while (node != null);
		}
		// return builder.replace(start, end, str)
		return builder.replace(builder.length() - 1, builder.length(), "]").toString();
	}

	public int indexOf(int item) {
		Node node = first;
		int index = 0;
		do {
			if (node.getValue() == item) {
				return index;
			}
			index++;
			node = node.getNext();
		} while (node != null);
		return -1;
	}

	public boolean contains(int item) {
		return indexOf(item) != -1;
	}
}
